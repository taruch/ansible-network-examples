---
- name: Configure Certificate on Juniper JunOS device
  hosts: juniper
  gather_facts: false
  
  vars:
    domain_name: ansible.local
    ca_host: ec2-3-23-237-32.us-east-2.compute.amazonaws.com

  tasks:
    - name: Backup Config
      tags:
        - backup
        - never
      junipernetworks.junos.junos_config:
        backup: true
        backup_format: json
        dir_path: /tmp/

    # - name: Configure hostname and domain name
    #   tags:
    #     - hostinfo
    #     - always
    #   junipernetworks.junos.junos_system:
    #     hostname: "{{ inventory_hostname }}"
    #     domain_name: "{{ domain_name }}"
    #     name_servers:
    #       - 8.8.8.8
    #     domain_search:
    #       - "{{ domain_name }}"

    # - name: Delete the Trustpoint on Switch
    #   tags:
    #     - trustpoint_delete
    #     - never
    #   ansible.netcommon.cli_command:
    #     command: "{{ item }}"
    #     prompt: "this?"
    #     answer: "yes"
    #   loop:
    #     - conf t
    #     - no crypto pki trustpoint {{ CACERT }}

    - name: Create a CA Profile on Router (works - idempotent)
      tags:
        - ca_profile_create
        - never
      block:
        # - name: Create the CA Profile (haven't tested this yet)
        #   ansible.netcommon.cli_config:
        #     config: "set security pki ca-profile CACERT ca-identity CAcert revocation-check disable"
        #     # set security pki ca-profile ca-profile-ipsec ca-identity CACERT 
        #     commit: true
        #   register: create_caprofile_output

        - name: Create the CA Profile
          vars:
            ansible_connection: netconf
          junipernetworks.junos.junos_config:
            lines: "set security pki ca-profile CACERT ca-identity CAcert revocation-check disable"
            # set security pki ca-profile ca-profile-ipsec ca-identity CACERT 
            update: merge
            confirm_commit: true
          register: create_caprofile_output

        - name: Debug output
          ansible.builtin.debug:
            var: create_caprofile_output
            verbosity: 3

    - name: Generate a certificate pair (works - not idempotent)
      tags:
        - key_generation
        - never
      block:

        - name: Create the CA Profile
          vars:
            ansible_connection: netconf
          junipernetworks.junos.junos_config:
            lines: "request security pki generate-key-pair certificate-id {{ inventory_hostname }}_local size 2048 type rsa"
            update: merge
            confirm_commit: true
          register: create_caprofile_output

        ###  DO THIS NEXT ###
        ###  DO THIS NEXT ###
        ###  DO THIS NEXT ###
        ###  DO THIS NEXT ###
        ###  DO THIS NEXT ###
        ###  DO THIS NEXT ###
        ###  DO THIS NEXT ###
        # SO I CAN DO A CLEAR HERE, OR FIGURE OUT HOW TO DO IT MORE IDEMPOTENTLY

        # - name: Generate the RSA key (need to test)
        #   junipernetworks.junos.junos_command:
        #     commands: "request security pki generate-key-pair certificate-id {{ inventory_hostname }}_local size 2048 type rsa"
        #   register: rsa_key_output

        - name: Debug output
          ansible.builtin.debug:
            var: rsa_key_output
            verbosity: 3

    - name: Generate CSR on Switch (works)
      tags:
        - csr_create
        - never
      block:
        - name: Clear current CSR
          junipernetworks.junos.junos_command:
            commands: "clear security pki certificate-request certificate-id {{ inventory_hostname }}_local"

        - name: run command expecting user confirmation
          ansible.netcommon.cli_command:
            command: "request security pki generate-certificate-request certificate-id {{ inventory_hostname }}_local domain-name {{ inventory_hostname }}.ansible.local subject CN={{ inventory_hostname }}.ansible.local,OU=NAPS,O=RedHat,L=Pasadena,ST=MD,C=US filename /var/tmp/{{ inventory_hostname }}.csr"
            # command: >
            #   request security pki generate-certificate-request
            #   certificate-id {{ inventory_hostname }}_local domain-name {{ inventory_hostname }}.ansible.local
            #   subject CN={{ inventory_hostname }}.ansible.local,OU=NAPS,O=Red Hat,L=Pasadena,ST=MD,C=US
            #    filename /var/tmp/{{ inventory_hostname }}.csr
            prompt: "Generated"
            answer: ""
          register: csr_output

        - name: Grab the output of the Certificate Signing Request
          ansible.netcommon.cli_command:
            command: file show /var/tmp/{{ inventory_hostname }}.csr 
          register: csr

        - name: Debug output
          ansible.builtin.debug:
            msg: "{{ csr.stdout_lines }}"
            verbosity: 3

        - name: Write CSR to file
          ansible.builtin.copy:
            content: "{{ csr.stdout }}"
            dest: "/tmp/{{ inventory_hostname }}.csr"
            owner: juniper
            group: juniper
            mode: '0644'
            backup: true
          delegate_to: ca-host
          become: true

    - name: Add the CA Cert to the CA Profile (check that this works on new host)
      tags:
        - ca_cert_ca_profile
        - never
      block:
        - name: copy cert to {{ inventory_hostname }}
          ansible.netcommon.cli_command:
            command: "clear security pki ca-certificate ca-profile CACERT"
            prompt: 
              - "Are you sure you want to continue connecting"
            answer: 
              - "yes"
          register: copy_output

        ###  THIS CAN BE UNCOMMENTED AFTER I BUILD NEW EE with junos-eznc python pkg
        # - name: Slurp cacert from CA Host
        #   ansible.builtin.slurp:
        #     src: "/tmp/{{ inventory_hostname }}.cer"
        #   register: slurpedfile
        #   delegate_to: ca-host

        # - name: Copy the host cert to EE
        #   ansible.builtin.copy:
        #     content: "{{ (slurpedfile['content'] | b64decode) }}"
        #     #src: "{{ (slurpedfile['content'] | b64decode).splitlines() }}"
        #     dest: "/tmp/{{ inventory_hostname }}"

        # - name: upload local file to tmp directory on remote device
        #   vars:
        #     ansible_connection: netconf
        #   junipernetworks.junos.junos_scp:
        #     src: "/tmp/{{ inventory_hostname }}.cer"
        #     dest: /var/tmp/{{ inventory_hostname }}.test"
        ###

        - name: copy cert to {{ inventory_hostname }}
          ansible.netcommon.cli_command:
            command: "scp juniper@{{ ca_host }}:/opt/X509CA/demoCA/cacert.pem /var/tmp/cacert.pem"
            prompt: 
              - "password"
            answer: 
              - "{{ ca_pass }}"
          register: copy_output
                
        - name: Add the CA Certificate to the CA Profile
          ansible.netcommon.cli_command:
            command: "request security pki ca-certificate load ca-profile CACERT filename /var/tmp/cacert.pem"
            prompt: "certificate"
            answer: "yes"
          register: copy_output

    - name: Add the host Cert to the CA Profile (works)
      tags:
        - import_host_certificate
        - never
      block:
        - name: copy host cert to {{ inventory_hostname }}
          ansible.netcommon.cli_command:
            command: "scp juniper@{{ ca_host }}:/tmp/{{ inventory_hostname }}.cer /var/tmp/{{ inventory_hostname }}.cer"
            prompt: "password"
            answer: "{{ ca_pass }}"
          register: copy_output

        - name: Clear the Current Host Certificate in the CA Profile
          ansible.netcommon.cli_command:
            command: "clear security pki local-certificate certificate-id {{ inventory_hostname }}_local"
          register: copy_output

        - name: Add the Host Certificate to the CA Profile
          ansible.netcommon.cli_command:
            command: "request security pki local-certificate load certificate-id {{ inventory_hostname }}_local filename /var/tmp/{{ inventory_hostname }}.cer"
            # prompt: "certificate"
            # answer: "yes"
          register: copy_output


    - name: Get running configuration and state data
      tags:
        - getconf
        - never
      vars:
        ansible_connection: netconf
      block:
        - name: Get stuff
          ansible.netcommon.netconf_get:
            display: xml
            filter: <configuration><security><pki><ca-profile><name>CACERT</name></ca-profile></pki></security></configuration>
          register: conf

        - name: Debug output
          ansible.builtin.debug:
            msg: "{{ conf.stdout_lines }}"
            verbosity: 3

    - name: Set Client Name for Follow-on Templates
      tags:
        - generate_cert
        - never
      ansible.builtin.set_stats:
        data:
          client: "{{ inventory_hostname }}"


...
